"use strict";var e=[{id:1,amount:"0-10",questions:[{id:1,text:"Held hands romantically?",done:!1},{id:2,text:"Been on a date?",done:!1},{id:3,text:"Been in a relationship?",done:!1},{id:4,text:"Danced without leaving room for Jesus?",done:!1},{id:5,text:"Kissed a non-family member?",done:!1},{id:6,text:"Kissed a non-family member on the lips?",done:!1},{id:7,text:"French kissed?",done:!1},{id:8,text:"French kissed in public?",done:!1},{id:9,text:"Kissed on the neck?",done:!1},{id:10,text:"Kissed horizontally?",done:!1}]},{id:2,amount:"11-20",questions:[{id:11,text:"Held hands romantically?",done:!1},{id:12,text:"Been on a date?",done:!1},{id:13,text:"Been in a relationship?",done:!1},{id:14,text:"Danced without leaving room for Jesus?",done:!1},{id:15,text:"Kissed a non-family member?",done:!1},{id:16,text:"Kissed a non-family member on the lips?",done:!1},{id:17,text:"French kissed?",done:!1},{id:18,text:"French kissed in public?",done:!1},{id:19,text:"Kissed on the neck?",done:!1},{id:20,text:"Kissed horizontally?",done:!1}]},{id:3,amount:"21-30",questions:[{id:21,text:"Held hands romantically?",done:!1},{id:22,text:"Been on a date?",done:!1},{id:23,text:"Been in a relationship?",done:!1},{id:24,text:"Danced without leaving room for Jesus?",done:!1},{id:25,text:"Kissed a non-family member?",done:!1},{id:26,text:"Kissed a non-family member on the lips?",done:!1},{id:27,text:"French kissed?",done:!1},{id:28,text:"French kissed in public?",done:!1},{id:29,text:"Kissed on the neck?",done:!1},{id:30,text:"Kissed horizontally?",done:!1}]},{id:4,amount:"31-40",questions:[{id:31,text:"Held hands romantically?",done:!1},{id:32,text:"Been on a date?",done:!1},{id:33,text:"Been in a relationship?",done:!1},{id:34,text:"Danced without leaving room for Jesus?",done:!1},{id:35,text:"Kissed a non-family member?",done:!1},{id:36,text:"Kissed a non-family member on the lips?",done:!1},{id:37,text:"French kissed?",done:!1},{id:38,text:"French kissed in public?",done:!1},{id:39,text:"Kissed on the neck?",done:!1},{id:40,text:"Kissed horizontally?",done:!1}]},{id:5,amount:"41-50",questions:[{id:41,text:"Held hands romantically?",done:!1},{id:42,text:"Been on a date?",done:!1},{id:43,text:"Been in a relationship?",done:!1},{id:44,text:"Danced without leaving room for Jesus?",done:!1},{id:45,text:"Kissed a non-family member?",done:!1},{id:46,text:"Kissed a non-family member on the lips?",done:!1},{id:47,text:"French kissed?",done:!1},{id:48,text:"French kissed in public?",done:!1},{id:49,text:"Kissed on the neck?",done:!1},{id:50,text:"Kissed horizontally?",done:!1}]},{id:6,amount:"51-60",questions:[{id:51,text:"Held hands romantically?",done:!1},{id:52,text:"Been on a date?",done:!1},{id:53,text:"Been in a relationship?",done:!1},{id:54,text:"Danced without leaving room for Jesus?",done:!1},{id:55,text:"Kissed a non-family member?",done:!1},{id:56,text:"Kissed a non-family member on the lips?",done:!1},{id:57,text:"French kissed?",done:!1},{id:58,text:"French kissed in public?",done:!1},{id:59,text:"Kissed on the neck?",done:!1},{id:60,text:"Kissed horizontally?",done:!1}]},{id:7,amount:"61-70",questions:[{id:61,text:"Held hands romantically?",done:!1},{id:62,text:"Been on a date?",done:!1},{id:63,text:"Been in a relationship?",done:!1},{id:64,text:"Danced without leaving room for Jesus?",done:!1},{id:65,text:"Kissed a non-family member?",done:!1},{id:66,text:"Kissed a non-family member on the lips?",done:!1},{id:67,text:"French kissed?",done:!1},{id:68,text:"French kissed in public?",done:!1},{id:69,text:"Kissed on the neck?",done:!1},{id:70,text:"Kissed horizontally?",done:!1}]},{id:8,amount:"71-80",questions:[{id:71,text:"Held hands romantically?",done:!1},{id:72,text:"Been on a date?",done:!1},{id:73,text:"Been in a relationship?",done:!1},{id:74,text:"Danced without leaving room for Jesus?",done:!1},{id:75,text:"Kissed a non-family member?",done:!1},{id:76,text:"Kissed a non-family member on the lips?",done:!1},{id:77,text:"French kissed?",done:!1},{id:78,text:"French kissed in public?",done:!1},{id:79,text:"Kissed on the neck?",done:!1},{id:80,text:"Kissed horizontally?",done:!1}]},{id:9,amount:"81-90",questions:[{id:81,text:"Held hands romantically?",done:!1},{id:82,text:"Been on a date?",done:!1},{id:83,text:"Been in a relationship?",done:!1},{id:84,text:"Danced without leaving room for Jesus?",done:!1},{id:85,text:"Kissed a non-family member?",done:!1},{id:86,text:"Kissed a non-family member on the lips?",done:!1},{id:87,text:"French kissed?",done:!1},{id:88,text:"French kissed in public?",done:!1},{id:89,text:"Kissed on the neck?",done:!1},{id:90,text:"Kissed horizontally?",done:!1}]},{id:10,amount:"91-100",questions:[{id:91,text:"Held hands romantically?",done:!1},{id:92,text:"Been on a date?",done:!1},{id:93,text:"Been in a relationship?",done:!1},{id:94,text:"Danced without leaving room for Jesus?",done:!1},{id:95,text:"Kissed a non-family member?",done:!1},{id:96,text:"Kissed a non-family member on the lips?",done:!1},{id:97,text:"French kissed?",done:!1},{id:98,text:"French kissed in public?",done:!1},{id:99,text:"Kissed on the neck?",done:!1},{id:100,text:"Kissed horizontally?",done:!1}]}];function t(e){+e.textContent>=95?e.style.color="#5fc861":+e.textContent>=85?e.style.color="#87c549":+e.textContent>=75?e.style.color="#b3c22e":+e.textContent>=65?e.style.color="#dbbd16":+e.textContent>=55?e.style.color="#fab203":+e.textContent>=45?e.style.color="#ffa300":+e.textContent>=35?e.style.color="#fc8c02":+e.textContent>=25?e.style.color="#ed720b":+e.textContent>=15?e.style.color="#dc5a15":+e.textContent>=5?e.style.color="#d0481d":e.style.color="#cc4120"}function s(e){e.preventDefault();var s=document.querySelector(".result"),n=document.querySelector(".test"),i=document.querySelector(".test__score-rate"),o=document.querySelector(".result__score-number"),a=document.querySelector(".result__score-point");n.classList.add("hide"),s.classList.remove("hide"),o.textContent=i.textContent,t(o),a.style.left=+o.textContent+"%"}function n(s,n,i,o){s.forEach((function(s){s.addEventListener("click",(function(s){if(s.currentTarget===s.target){s.currentTarget.classList.toggle("label-active"),t(n);var a=s.currentTarget.querySelector(".test__question-input"),c=e.find((function(e){return e.id===o}));c.questions[(a.id-1)%10].done=!c.questions[(a.id-1)%10].done,a.dataset.state=c.questions[(a.id-1)%10].done,c.questions[(a.id-1)%10].done?i.textContent=+i.textContent+1:i.textContent=+i.textContent-1}}))}))}document.addEventListener("DOMContentLoaded",(function(){var i=document.querySelector(".start"),o=document.querySelector(".rice-purity-test"),a=document.querySelector(".js-fullscreen");a.addEventListener("click",(function(e){e.preventDefault(),e.currentTarget.classList.contains("active")?(e.currentTarget.classList.remove("active"),e.currentTarget.querySelector("span").textContent="Open Fullscreen",o.classList.remove("fixed"),document.body.style.overflow="visible",i.style.height="100%"):(e.currentTarget.classList.add("active"),e.currentTarget.querySelector("span").textContent="Close Fullscreen",o.classList.add("fixed"),i.style.height=o.clientHeight-77+"px",document.body.style.overflow="hidden")})),window.addEventListener("keydown",(function(e){o.classList.contains("fixed")&&"Escape"===e.key&&(a.classList.remove("active"),a.querySelector("span").textContent="Open Fullscreen",o.classList.remove("fixed"),document.body.style.overflow="visible",p.style.height="100%")})),window.addEventListener("resize",(function(){var e=document.querySelector(".start"),t=document.querySelector(".rice-purity-test");e.style.height="100%",e.style.height=t.clientHeight-77+"px"})),document.querySelectorAll(".menu-header__link").forEach((function(e){e.addEventListener("click",(function(e){e.preventDefault();var t=document.querySelector(".gamb-hidden"),s=document.querySelector(".gamb"),n=e.currentTarget.getAttribute("href");document.querySelector(n).scrollIntoView({block:"start",behavior:"smooth"}),(t.classList.contains("open")||s.classList.contains("open"))&&(t.classList.remove("open"),s.classList.remove("open")),"hidden"===document.body.style.overflow&&(document.body.style.overflow="visible")}))})),document.querySelector(".js-gamb").addEventListener("click",(function(e){e.preventDefault(),e.currentTarget.classList.toggle("open"),document.querySelector(".js-gamb-hidden").classList.toggle("open"),"hidden"===document.body.style.overflow?document.body.style.overflow="visible":document.body.style.overflow="hidden"})),window.addEventListener("click",(function(e){var t=document.querySelector(".js-gamb"),s=document.querySelector(".js-gamb-hidden");if(t.classList.contains("open")){if(e.target.closest(".js-gamb-hidden")||e.target.closest(".js-gamb"))return;t.classList.remove("open"),s.classList.remove("open"),document.body.style.overflow="visible"}}));var c=document.querySelector(".gamb-hidden .header__lang");document.querySelector(".js-gamb-hidden .lang-header__title").addEventListener("click",(function(e){e.preventDefault();var t=document.querySelector(".gamb-hidden .lang-header__dropdown");c.classList.contains("open")?(t.classList.remove("show"),setTimeout((function(){t.style.display="none"}),200),c.classList.remove("open")):(t.style.display="block",setTimeout((function(){t.classList.add("show")})),c.classList.add("open"))})),document.querySelector(".theme-mode").addEventListener("click",(function(e){e.preventDefault();var t=document.querySelectorAll(".logo-use"),s=document.querySelector(".js-switch");s.classList.toggle("on"),s.classList.contains("on")?(t.forEach((function(e){return e.setAttribute("xlink:href","./images/svg/sprite.svg#white-logo")})),document.body.classList.add("dark-theme")):(document.body.classList.remove("dark-theme"),t.forEach((function(e){return e.setAttribute("xlink:href","./images/svg/sprite.svg#logo")})))}));var l=1,d=document.querySelectorAll(".test__question-label"),u=document.querySelector(".test__score-rate"),r=document.querySelector(".test__answers-amount");t(u),n(d,u,r,l);var _=document.querySelector(".test__nav_prev");_.style.display="none";var q=document.querySelector(".test__nav_next"),p=document.querySelector(".test__middle");_.addEventListener("click",(function(t){t.preventDefault(),1===--l?(_.style.display="none",q.classList.add("full"),q.dataset.page=l+1):(_.dataset.page=l-1,"results"!==q.dataset.page?q.dataset.page=l+1:(q.classList.remove("results"),q.dataset.page=10));var i=e.find((function(e){return e.id===+_.dataset.page})),o=e.find((function(e){return e.id===+q.dataset.page})),a=e.find((function(e){return e.id===l}));10==+q.dataset.page?(q.removeEventListener("click",s),q.innerHTML='\n          <div class="test__nav-wrapper">\n          <div class="test__nav-wrapper-arrow">\n            <span class="test__nav-number text-white">'.concat(o.amount,'</span>\n            <svg class="test__arrow test__arrow_next arrow-light">\n              <use xlink:href="./images/svg/sprite.svg#arrow"></use>\n            </svg>\n          </div>\n          <span class="test__nav-text text-white">NEXT QUESTIONS</span>\n        </div>\n          ')):q.querySelector(".test__nav-number").textContent=o.amount,0!=+_.dataset.page&&(_.querySelector(".test__nav-number").textContent=i.amount),p.innerHTML='\n    <ul class="test__question-list">\n    <li class="test__question-item"> <label class="test__question-label '.concat(a.questions[0].done?"label-active":"",'" for="').concat(a.questions[0].id,'">\n        <span class="test__question-text text-light">\n        <span class="test__question-number">').concat(a.questions[0].id,".</span>\n        ").concat(a.questions[0].text,'\n        </span>\n          <input data-state="').concat(a.questions[0].done,'" name="').concat(a.id,"-q-").concat(a.questions[0].id,'" type="checkbox" id="').concat(a.questions[0].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[1].done?"label-active":"",'" for="').concat(a.questions[1].id,'">\n        <span class="test__question-text text-light">\n          <span class="test__question-number">').concat(a.questions[1].id,".</span>\n        ").concat(a.questions[1].text,'\n        </span>\n          <input data-state="').concat(a.questions[1].done,'"  name="').concat(a.id,"-q-").concat(a.questions[1].id,'" type="checkbox" id="').concat(a.questions[1].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[2].done?"label-active":"",'" for="').concat(a.questions[2].id,'">\n        <span class="test__question-text text-light">\n          <span class="test__question-number">').concat(a.questions[2].id,".</span>\n        ").concat(a.questions[2].text,'\n        </span>\n          <input data-state="').concat(a.questions[2].done,'" name="').concat(a.id,"-q-").concat(a.questions[2].id,'" type="checkbox" id="').concat(a.questions[2].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[3].done?"label-active":"",'" for="').concat(a.questions[3].id,'">\n        <span class="test__question-text text-light">\n           <span class="test__question-number">').concat(a.questions[3].id,".</span>\n        ").concat(a.questions[3].text,'\n        </span>\n          <input data-state="').concat(a.questions[3].done,'" name="').concat(a.id,"-q-").concat(a.questions[3].id,'" type="checkbox" id="').concat(a.questions[3].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[4].done?"label-active":"",'" for="').concat(a.questions[4].id,'">\n        <span class="test__question-text text-light">\n          <span class="test__question-number">').concat(a.questions[4].id,".</span>\n        ").concat(a.questions[4].text,'\n        </span>\n          <input data-state="').concat(a.questions[4].done,'" name="').concat(a.id,"-q-").concat(a.questions[4].id,'" type="checkbox" id="').concat(a.questions[4].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[5].done?"label-active":"",'" for="').concat(a.questions[5].id,'">\n        <span class="test__question-text text-light">\n          <span class="test__question-number">').concat(a.questions[5].id,".</span>\n        ").concat(a.questions[5].text,'\n        </span>\n          <input data-state="').concat(a.questions[5].done,'" name="').concat(a.id,"-q-").concat(a.questions[5].id,'" type="checkbox" id="').concat(a.questions[5].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[6].done?"label-active":"",'" for="').concat(a.questions[6].id,'">\n        <span class="test__question-text text-light">\n          <span class="test__question-number">').concat(a.questions[6].id,".</span>\n        ").concat(a.questions[6].text,'\n        </span>\n          <input data-state="').concat(a.questions[6].done,'" name="').concat(a.id,"-q-").concat(a.questions[6].id,'" type="checkbox" id="').concat(a.questions[6].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[7].done?"label-active":"",'" for="').concat(a.questions[7].id,'">\n        <span class="test__question-text text-light">\n          <span class="test__question-number">').concat(a.questions[7].id,".</span>\n        ").concat(a.questions[7].text,'\n        </span>\n          <input data-state="').concat(a.questions[7].done,'" name="').concat(a.id,"-q-").concat(a.questions[7].id,'" type="checkbox" id="').concat(a.questions[7].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[8].done?"label-active":"",'" for="').concat(a.questions[8].id,'">\n        <span class="test__question-text text-light">\n          <span class="test__question-number">').concat(a.questions[8].id,".</span>\n        ").concat(a.questions[8].text,'\n        </span>\n          <input data-state="').concat(a.questions[8].done,'" name="').concat(a.id,"-q-").concat(a.questions[8].id,'" type="checkbox" id="').concat(a.questions[8].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n    <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[9].done?"label-active":"",'" for="').concat(a.questions[8].id,'">\n        <span class="test__question-text text-light">\n          <span class="test__question-number">').concat(a.questions[9].id,".</span>\n        ").concat(a.questions[9].text,'\n        </span>\n          <input data-state="').concat(a.questions[9].done,'" name="').concat(a.id,"-q-").concat(a.questions[9].id,'" type="checkbox" id="').concat(a.questions[8].id,'" class="test__question-input">\n          <span class="test__question-custom-input">\n            <svg class="test__check">\n              <use  xlink:href="./images/svg/sprite.svg#check"></use>\n            </svg>\n          </span>\n      </label></li>\n  </ul>\n    '),n(d=document.querySelectorAll(".test__question-label"),u,r,l)})),q.addEventListener("click",(function(t){if(t.preventDefault(),"show-result"!==q.dataset.page){1===l&&(_.style.display="flex",q.classList.remove("full")),10===++l?(q.innerHTML='\n      <div class="test__nav-wrapper ">\n      <div class="test__nav-wrapper-arrow">\n        <span class="test__nav-number text-white">See Result</span>\n        <svg class="test__arrow test__arrow_next arrow-light">\n          <use xlink:href="./images/svg/sprite.svg#arrow"></use>\n        </svg>\n      </div>\n    </div>',q.classList.add("show-result"),_.dataset.page=l-1,q.dataset.page="show-result"):(_.dataset.page=l-1,q.dataset.page=l+1);var i=e.find((function(e){return e.id===+_.dataset.page}));if("show-result"===q.dataset.page)q.addEventListener("click",s);else{var o=e.find((function(e){return e.id===+q.dataset.page}));q.querySelector(".test__nav-number").textContent=o.amount}var a=e.find((function(e){return e.id===l}));0!=+_.dataset.page&&(_.querySelector(".test__nav-number").textContent=i.amount),p.innerHTML='\n        <ul class="test__question-list">\n        <li class="test__question-item"> <label class="test__question-label '.concat(a.questions[0].done?"label-active":"",'" for="').concat(a.questions[0].id,'">\n            <span class="test__question-text text-light">\n            <span class="test__question-number">').concat(a.questions[0].id,".</span>\n            ").concat(a.questions[0].text,'\n            </span>\n              <input data-state="').concat(a.questions[0].done,'" name="').concat(a.id,"-q-").concat(a.questions[0].id,'" type="checkbox" id="').concat(a.questions[0].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[1].done?"label-active":"",'" for="').concat(a.questions[1].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[1].id,".</span>\n            ").concat(a.questions[1].text,'\n            </span>\n              <input data-state="').concat(a.questions[1].done,'"  name="').concat(a.id,"-q-").concat(a.questions[1].id,'" type="checkbox" id="').concat(a.questions[1].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[2].done?"label-active":"",'" for="').concat(a.questions[2].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[2].id,".</span>\n            ").concat(a.questions[2].text,'\n            </span>\n              <input data-state="').concat(a.questions[2].done,'" name="').concat(a.id,"-q-").concat(a.questions[2].id,'" type="checkbox" id="').concat(a.questions[2].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[3].done?"label-active":"",'" for="').concat(a.questions[3].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[3].id,".</span>\n            ").concat(a.questions[3].text,'\n            </span>\n              <input data-state="').concat(a.questions[3].done,'" name="').concat(a.id,"-q-").concat(a.questions[3].id,'" type="checkbox" id="').concat(a.questions[3].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[4].done?"label-active":"",'" for="').concat(a.questions[4].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[4].id,".</span>\n            ").concat(a.questions[4].text,'\n            </span>\n              <input data-state="').concat(a.questions[4].done,'" name="').concat(a.id,"-q-").concat(a.questions[4].id,'" type="checkbox" id="').concat(a.questions[4].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[5].done?"label-active":"",'" for="').concat(a.questions[5].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[5].id,".</span>\n            ").concat(a.questions[5].text,'\n            </span>\n              <input data-state="').concat(a.questions[5].done,'" name="').concat(a.id,"-q-").concat(a.questions[5].id,'" type="checkbox" id="').concat(a.questions[5].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[6].done?"label-active":"",'" for="').concat(a.questions[6].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[6].id,".</span>\n            ").concat(a.questions[6].text,'\n            </span>\n              <input data-state="').concat(a.questions[6].done,'" name="').concat(a.id,"-q-").concat(a.questions[6].id,'" type="checkbox" id="').concat(a.questions[6].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[7].done?"label-active":"",'" for="').concat(a.questions[7].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[7].id,".</span>\n            ").concat(a.questions[7].text,'\n            </span>\n              <input data-state="').concat(a.questions[7].done,'" name="').concat(a.id,"-q-").concat(a.questions[7].id,'" type="checkbox" id="').concat(a.questions[7].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[8].done?"label-active":"",'" for="').concat(a.questions[8].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[8].id,".</span>\n            ").concat(a.questions[8].text,'\n            </span>\n              <input data-state="').concat(a.questions[8].done,'" name="').concat(a.id,"-q-").concat(a.questions[8].id,'" type="checkbox" id="').concat(a.questions[8].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n        <li class="test__question-item"> <label class="test__question-label ').concat(a.questions[9].done?"label-active":"",'" for="').concat(a.questions[8].id,'">\n            <span class="test__question-text text-light">\n              <span class="test__question-number">').concat(a.questions[9].id,".</span>\n            ").concat(a.questions[9].text,'\n            </span>\n              <input data-state="').concat(a.questions[9].done,'" name="').concat(a.id,"-q-").concat(a.questions[9].id,'" type="checkbox" id="').concat(a.questions[8].id,'" class="test__question-input">\n              <span class="test__question-custom-input">\n                <svg class="test__check">\n                  <use  xlink:href="./images/svg/sprite.svg#check"></use>\n                </svg>\n              </span>\n          </label></li>\n      </ul>\n        '),n(d=document.querySelectorAll(".test__question-label"),u,r,l)}})),document.querySelector(".rice-purity-test__start-btn").addEventListener("click",(function(e){e.preventDefault();var t=document.querySelector(".start"),s=document.querySelector(".test");t.classList.add("hide"),s.classList.remove("hide")}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
